/* eslint @typescript-eslint/no-explicit-any: 0 */
/* eslint @typescript-eslint/no-invalid-void-type: 0 */

/*
 * file generated by bunvim: https://github.com/gualcasas/bunvim
 */

export type NeovimApiInfo = {
  nvim_get_autocmds: {
    parameters: [opts: Record<string, any>];
    returns: any[];
  };
  nvim_create_autocmd: {
    parameters: [event: any, opts: Record<string, any>];
    returns: number;
  };
  nvim_del_autocmd: {
    parameters: [id: number];
    returns: void;
  };
  nvim_clear_autocmds: {
    parameters: [opts: Record<string, any>];
    returns: void;
  };
  nvim_create_augroup: {
    parameters: [name: string, opts: Record<string, any>];
    returns: number;
  };
  nvim_del_augroup_by_id: {
    parameters: [id: number];
    returns: void;
  };
  nvim_del_augroup_by_name: {
    parameters: [name: string];
    returns: void;
  };
  nvim_exec_autocmds: {
    parameters: [event: any, opts: Record<string, any>];
    returns: void;
  };
  nvim_buf_line_count: {
    parameters: [buffer: number];
    returns: number;
  };
  nvim_buf_attach: {
    parameters: [
      buffer: number,
      send_buffer: boolean,
      opts: Record<string, any>
    ];
    returns: boolean;
  };
  nvim_buf_detach: {
    parameters: [buffer: number];
    returns: boolean;
  };
  nvim_buf_get_lines: {
    parameters: [
      buffer: number,
      start: number,
      end: number,
      strict_indexing: boolean
    ];
    returns: string[];
  };
  nvim_buf_set_lines: {
    parameters: [
      buffer: number,
      start: number,
      end: number,
      strict_indexing: boolean,
      replacement: string[]
    ];
    returns: void;
  };
  nvim_buf_set_text: {
    parameters: [
      buffer: number,
      start_row: number,
      start_col: number,
      end_row: number,
      end_col: number,
      replacement: string[]
    ];
    returns: void;
  };
  nvim_buf_get_text: {
    parameters: [
      buffer: number,
      start_row: number,
      start_col: number,
      end_row: number,
      end_col: number,
      opts: Record<string, any>
    ];
    returns: string[];
  };
  nvim_buf_get_offset: {
    parameters: [buffer: number, index: number];
    returns: number;
  };
  nvim_buf_get_var: {
    parameters: [buffer: number, name: string];
    returns: any;
  };
  nvim_buf_get_changedtick: {
    parameters: [buffer: number];
    returns: number;
  };
  nvim_buf_get_keymap: {
    parameters: [buffer: number, mode: string];
    returns: Record<string, any>[];
  };
  nvim_buf_set_keymap: {
    parameters: [
      buffer: number,
      mode: string,
      lhs: string,
      rhs: string,
      opts: Record<string, any>
    ];
    returns: void;
  };
  nvim_buf_del_keymap: {
    parameters: [buffer: number, mode: string, lhs: string];
    returns: void;
  };
  nvim_buf_set_var: {
    parameters: [buffer: number, name: string, value: any];
    returns: void;
  };
  nvim_buf_del_var: {
    parameters: [buffer: number, name: string];
    returns: void;
  };
  nvim_buf_get_name: {
    parameters: [buffer: number];
    returns: string;
  };
  nvim_buf_set_name: {
    parameters: [buffer: number, name: string];
    returns: void;
  };
  nvim_buf_is_loaded: {
    parameters: [buffer: number];
    returns: boolean;
  };
  nvim_buf_delete: {
    parameters: [buffer: number, opts: Record<string, any>];
    returns: void;
  };
  nvim_buf_is_valid: {
    parameters: [buffer: number];
    returns: boolean;
  };
  nvim_buf_del_mark: {
    parameters: [buffer: number, name: string];
    returns: boolean;
  };
  nvim_buf_set_mark: {
    parameters: [
      buffer: number,
      name: string,
      line: number,
      col: number,
      opts: Record<string, any>
    ];
    returns: boolean;
  };
  nvim_buf_get_mark: {
    parameters: [buffer: number, name: string];
    returns: [number, number];
  };
  nvim_buf_call: {
    parameters: [buffer: number, fun: any];
    returns: any;
  };
  nvim_parse_cmd: {
    parameters: [str: string, opts: Record<string, any>];
    returns: Record<string, any>;
  };
  nvim_cmd: {
    parameters: [cmd: Record<string, any>, opts: Record<string, any>];
    returns: string;
  };
  nvim_create_user_command: {
    parameters: [name: string, command: any, opts: Record<string, any>];
    returns: void;
  };
  nvim_del_user_command: {
    parameters: [name: string];
    returns: void;
  };
  nvim_buf_create_user_command: {
    parameters: [
      buffer: number,
      name: string,
      command: any,
      opts: Record<string, any>
    ];
    returns: void;
  };
  nvim_buf_del_user_command: {
    parameters: [buffer: number, name: string];
    returns: void;
  };
  nvim_get_commands: {
    parameters: [opts: Record<string, any>];
    returns: Record<string, any>;
  };
  nvim_buf_get_commands: {
    parameters: [buffer: number, opts: Record<string, any>];
    returns: Record<string, any>;
  };
  nvim_get_option_info: {
    parameters: [name: string];
    returns: Record<string, any>;
  };
  nvim_create_namespace: {
    parameters: [name: string];
    returns: number;
  };
  nvim_get_namespaces: {
    parameters: [];
    returns: Record<string, any>;
  };
  nvim_buf_get_extmark_by_id: {
    parameters: [
      buffer: number,
      ns_id: number,
      id: number,
      opts: Record<string, any>
    ];
    returns: number[];
  };
  nvim_buf_get_extmarks: {
    parameters: [
      buffer: number,
      ns_id: number,
      start: any,
      end: any,
      opts: Record<string, any>
    ];
    returns: any[];
  };
  nvim_buf_set_extmark: {
    parameters: [
      buffer: number,
      ns_id: number,
      line: number,
      col: number,
      opts: Record<string, any>
    ];
    returns: number;
  };
  nvim_buf_del_extmark: {
    parameters: [buffer: number, ns_id: number, id: number];
    returns: boolean;
  };
  nvim_buf_add_highlight: {
    parameters: [
      buffer: number,
      ns_id: number,
      hl_group: string,
      line: number,
      col_start: number,
      col_end: number
    ];
    returns: number;
  };
  nvim_buf_clear_namespace: {
    parameters: [
      buffer: number,
      ns_id: number,
      line_start: number,
      line_end: number
    ];
    returns: void;
  };
  nvim_set_decoration_provider: {
    parameters: [ns_id: number, opts: Record<string, any>];
    returns: void;
  };
  nvim_get_option_value: {
    parameters: [name: string, opts: Record<string, any>];
    returns: any;
  };
  nvim_set_option_value: {
    parameters: [name: string, value: any, opts: Record<string, any>];
    returns: void;
  };
  nvim_get_all_options_info: {
    parameters: [];
    returns: Record<string, any>;
  };
  nvim_get_option_info2: {
    parameters: [name: string, opts: Record<string, any>];
    returns: Record<string, any>;
  };
  nvim_set_option: {
    parameters: [name: string, value: any];
    returns: void;
  };
  nvim_get_option: {
    parameters: [name: string];
    returns: any;
  };
  nvim_buf_get_option: {
    parameters: [buffer: number, name: string];
    returns: any;
  };
  nvim_buf_set_option: {
    parameters: [buffer: number, name: string, value: any];
    returns: void;
  };
  nvim_win_get_option: {
    parameters: [window: number, name: string];
    returns: any;
  };
  nvim_win_set_option: {
    parameters: [window: number, name: string, value: any];
    returns: void;
  };
  nvim_tabpage_list_wins: {
    parameters: [tabpage: number];
    returns: number[];
  };
  nvim_tabpage_get_var: {
    parameters: [tabpage: number, name: string];
    returns: any;
  };
  nvim_tabpage_set_var: {
    parameters: [tabpage: number, name: string, value: any];
    returns: void;
  };
  nvim_tabpage_del_var: {
    parameters: [tabpage: number, name: string];
    returns: void;
  };
  nvim_tabpage_get_win: {
    parameters: [tabpage: number];
    returns: number;
  };
  nvim_tabpage_get_number: {
    parameters: [tabpage: number];
    returns: number;
  };
  nvim_tabpage_is_valid: {
    parameters: [tabpage: number];
    returns: boolean;
  };
  nvim_ui_attach: {
    parameters: [width: number, height: number, options: Record<string, any>];
    returns: void;
  };
  nvim_ui_set_focus: {
    parameters: [gained: boolean];
    returns: void;
  };
  nvim_ui_detach: {
    parameters: [];
    returns: void;
  };
  nvim_ui_try_resize: {
    parameters: [width: number, height: number];
    returns: void;
  };
  nvim_ui_set_option: {
    parameters: [name: string, value: any];
    returns: void;
  };
  nvim_ui_try_resize_grid: {
    parameters: [grid: number, width: number, height: number];
    returns: void;
  };
  nvim_ui_pum_set_height: {
    parameters: [height: number];
    returns: void;
  };
  nvim_ui_pum_set_bounds: {
    parameters: [width: number, height: number, row: number, col: number];
    returns: void;
  };
  nvim_get_hl_id_by_name: {
    parameters: [name: string];
    returns: number;
  };
  nvim_get_hl: {
    parameters: [ns_id: number, opts: Record<string, any>];
    returns: Record<string, any>;
  };
  nvim_set_hl: {
    parameters: [ns_id: number, name: string, val: Record<string, any>];
    returns: void;
  };
  nvim_set_hl_ns: {
    parameters: [ns_id: number];
    returns: void;
  };
  nvim_set_hl_ns_fast: {
    parameters: [ns_id: number];
    returns: void;
  };
  nvim_feedkeys: {
    parameters: [keys: string, mode: string, escape_ks: boolean];
    returns: void;
  };
  nvim_input: {
    parameters: [keys: string];
    returns: number;
  };
  nvim_input_mouse: {
    parameters: [
      button: string,
      action: string,
      modifier: string,
      grid: number,
      row: number,
      col: number
    ];
    returns: void;
  };
  nvim_replace_termcodes: {
    parameters: [
      str: string,
      from_part: boolean,
      do_lt: boolean,
      special: boolean
    ];
    returns: string;
  };
  nvim_exec_lua: {
    parameters: [code: string, args: any[]];
    returns: any;
  };
  nvim_notify: {
    parameters: [msg: string, log_level: number, opts: Record<string, any>];
    returns: any;
  };
  nvim_strwidth: {
    parameters: [text: string];
    returns: number;
  };
  nvim_list_runtime_paths: {
    parameters: [];
    returns: string[];
  };
  nvim_get_runtime_file: {
    parameters: [name: string, all: boolean];
    returns: string[];
  };
  nvim_set_current_dir: {
    parameters: [dir: string];
    returns: void;
  };
  nvim_get_current_line: {
    parameters: [];
    returns: string;
  };
  nvim_set_current_line: {
    parameters: [line: string];
    returns: void;
  };
  nvim_del_current_line: {
    parameters: [];
    returns: void;
  };
  nvim_get_var: {
    parameters: [name: string];
    returns: any;
  };
  nvim_set_var: {
    parameters: [name: string, value: any];
    returns: void;
  };
  nvim_del_var: {
    parameters: [name: string];
    returns: void;
  };
  nvim_get_vvar: {
    parameters: [name: string];
    returns: any;
  };
  nvim_set_vvar: {
    parameters: [name: string, value: any];
    returns: void;
  };
  nvim_echo: {
    parameters: [chunks: any[], history: boolean, opts: Record<string, any>];
    returns: void;
  };
  nvim_out_write: {
    parameters: [str: string];
    returns: void;
  };
  nvim_err_write: {
    parameters: [str: string];
    returns: void;
  };
  nvim_err_writeln: {
    parameters: [str: string];
    returns: void;
  };
  nvim_list_bufs: {
    parameters: [];
    returns: number[];
  };
  nvim_get_current_buf: {
    parameters: [];
    returns: number;
  };
  nvim_set_current_buf: {
    parameters: [buffer: number];
    returns: void;
  };
  nvim_list_wins: {
    parameters: [];
    returns: number[];
  };
  nvim_get_current_win: {
    parameters: [];
    returns: number;
  };
  nvim_set_current_win: {
    parameters: [window: number];
    returns: void;
  };
  nvim_create_buf: {
    parameters: [listed: boolean, scratch: boolean];
    returns: number;
  };
  nvim_open_term: {
    parameters: [buffer: number, opts: Record<string, any>];
    returns: number;
  };
  nvim_chan_send: {
    parameters: [chan: number, data: string];
    returns: void;
  };
  nvim_list_tabpages: {
    parameters: [];
    returns: number[];
  };
  nvim_get_current_tabpage: {
    parameters: [];
    returns: number;
  };
  nvim_set_current_tabpage: {
    parameters: [tabpage: number];
    returns: void;
  };
  nvim_paste: {
    parameters: [data: string, crlf: boolean, phase: number];
    returns: boolean;
  };
  nvim_put: {
    parameters: [
      lines: string[],
      type: string,
      after: boolean,
      follow: boolean
    ];
    returns: void;
  };
  nvim_subscribe: {
    parameters: [event: string];
    returns: void;
  };
  nvim_unsubscribe: {
    parameters: [event: string];
    returns: void;
  };
  nvim_get_color_by_name: {
    parameters: [name: string];
    returns: number;
  };
  nvim_get_color_map: {
    parameters: [];
    returns: Record<string, any>;
  };
  nvim_get_context: {
    parameters: [opts: Record<string, any>];
    returns: Record<string, any>;
  };
  nvim_load_context: {
    parameters: [dict: Record<string, any>];
    returns: any;
  };
  nvim_get_mode: {
    parameters: [];
    returns: Record<string, any>;
  };
  nvim_get_keymap: {
    parameters: [mode: string];
    returns: Record<string, any>[];
  };
  nvim_set_keymap: {
    parameters: [
      mode: string,
      lhs: string,
      rhs: string,
      opts: Record<string, any>
    ];
    returns: void;
  };
  nvim_del_keymap: {
    parameters: [mode: string, lhs: string];
    returns: void;
  };
  nvim_get_api_info: {
    parameters: [];
    returns: any[];
  };
  nvim_set_client_info: {
    parameters: [
      name: string,
      version: Record<string, any>,
      type: string,
      methods: Record<string, any>,
      attributes: Record<string, any>
    ];
    returns: void;
  };
  nvim_get_chan_info: {
    parameters: [chan: number];
    returns: Record<string, any>;
  };
  nvim_list_chans: {
    parameters: [];
    returns: any[];
  };
  nvim_call_atomic: {
    parameters: [calls: any[]];
    returns: any[];
  };
  nvim_list_uis: {
    parameters: [];
    returns: any[];
  };
  nvim_get_proc_children: {
    parameters: [pid: number];
    returns: any[];
  };
  nvim_get_proc: {
    parameters: [pid: number];
    returns: any;
  };
  nvim_select_popupmenu_item: {
    parameters: [
      item: number,
      insert: boolean,
      finish: boolean,
      opts: Record<string, any>
    ];
    returns: void;
  };
  nvim_del_mark: {
    parameters: [name: string];
    returns: boolean;
  };
  nvim_get_mark: {
    parameters: [name: string, opts: Record<string, any>];
    returns: any[];
  };
  nvim_eval_statusline: {
    parameters: [str: string, opts: Record<string, any>];
    returns: Record<string, any>;
  };
  nvim_exec2: {
    parameters: [src: string, opts: Record<string, any>];
    returns: Record<string, any>;
  };
  nvim_command: {
    parameters: [command: string];
    returns: void;
  };
  nvim_eval: {
    parameters: [expr: string];
    returns: any;
  };
  nvim_call_function: {
    parameters: [fn: string, args: any[]];
    returns: any;
  };
  nvim_call_dict_function: {
    parameters: [dict: any, fn: string, args: any[]];
    returns: any;
  };
  nvim_parse_expression: {
    parameters: [expr: string, flags: string, highlight: boolean];
    returns: Record<string, any>;
  };
  nvim_open_win: {
    parameters: [buffer: number, enter: boolean, config: Record<string, any>];
    returns: number;
  };
  nvim_win_set_config: {
    parameters: [window: number, config: Record<string, any>];
    returns: void;
  };
  nvim_win_get_config: {
    parameters: [window: number];
    returns: Record<string, any>;
  };
  nvim_win_get_buf: {
    parameters: [window: number];
    returns: number;
  };
  nvim_win_set_buf: {
    parameters: [window: number, buffer: number];
    returns: void;
  };
  nvim_win_get_cursor: {
    parameters: [window: number];
    returns: [number, number];
  };
  nvim_win_set_cursor: {
    parameters: [window: number, pos: [number, number]];
    returns: void;
  };
  nvim_win_get_height: {
    parameters: [window: number];
    returns: number;
  };
  nvim_win_set_height: {
    parameters: [window: number, height: number];
    returns: void;
  };
  nvim_win_get_width: {
    parameters: [window: number];
    returns: number;
  };
  nvim_win_set_width: {
    parameters: [window: number, width: number];
    returns: void;
  };
  nvim_win_get_var: {
    parameters: [window: number, name: string];
    returns: any;
  };
  nvim_win_set_var: {
    parameters: [window: number, name: string, value: any];
    returns: void;
  };
  nvim_win_del_var: {
    parameters: [window: number, name: string];
    returns: void;
  };
  nvim_win_get_position: {
    parameters: [window: number];
    returns: [number, number];
  };
  nvim_win_get_tabpage: {
    parameters: [window: number];
    returns: number;
  };
  nvim_win_get_number: {
    parameters: [window: number];
    returns: number;
  };
  nvim_win_is_valid: {
    parameters: [window: number];
    returns: boolean;
  };
  nvim_win_hide: {
    parameters: [window: number];
    returns: void;
  };
  nvim_win_close: {
    parameters: [window: number, force: boolean];
    returns: void;
  };
  nvim_win_call: {
    parameters: [window: number, fun: any];
    returns: any;
  };
  nvim_win_set_hl_ns: {
    parameters: [window: number, ns_id: number];
    returns: void;
  };
};
